//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/DefaultInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputActions"",
    ""maps"": [
        {
            ""name"": ""DebugInputMap"",
            ""id"": ""d445fd08-197f-4303-b42b-063437a0a2c7"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""faee7550-a08a-4348-b913-e341d5319458"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64a6cf1b-30f3-468c-91fd-70e083635825"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlatformInputMap"",
            ""id"": ""f942dffe-e190-4448-aa62-ffd9c134c480"",
            ""actions"": [
                {
                    ""name"": ""SpawnBall"",
                    ""type"": ""Button"",
                    ""id"": ""f3e44e17-ef20-4a7b-8b64-1606e986ee76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""861370f3-e5b5-4bcb-b418-94ac1c7ea5c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0c8dc9e-76fa-4b8d-93ea-8e286c446649"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc20916a-df76-4ef2-b669-280a32b0de95"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DebugInputMap
        m_DebugInputMap = asset.FindActionMap("DebugInputMap", throwIfNotFound: true);
        m_DebugInputMap_Restart = m_DebugInputMap.FindAction("Restart", throwIfNotFound: true);
        // PlatformInputMap
        m_PlatformInputMap = asset.FindActionMap("PlatformInputMap", throwIfNotFound: true);
        m_PlatformInputMap_SpawnBall = m_PlatformInputMap.FindAction("SpawnBall", throwIfNotFound: true);
        m_PlatformInputMap_Test = m_PlatformInputMap.FindAction("Test", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DebugInputMap
    private readonly InputActionMap m_DebugInputMap;
    private List<IDebugInputMapActions> m_DebugInputMapActionsCallbackInterfaces = new List<IDebugInputMapActions>();
    private readonly InputAction m_DebugInputMap_Restart;
    public struct DebugInputMapActions
    {
        private @DefaultInputActions m_Wrapper;
        public DebugInputMapActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_DebugInputMap_Restart;
        public InputActionMap Get() { return m_Wrapper.m_DebugInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugInputMapActions set) { return set.Get(); }
        public void AddCallbacks(IDebugInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugInputMapActionsCallbackInterfaces.Add(instance);
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(IDebugInputMapActions instance)
        {
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(IDebugInputMapActions instance)
        {
            if (m_Wrapper.m_DebugInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugInputMapActions @DebugInputMap => new DebugInputMapActions(this);

    // PlatformInputMap
    private readonly InputActionMap m_PlatformInputMap;
    private List<IPlatformInputMapActions> m_PlatformInputMapActionsCallbackInterfaces = new List<IPlatformInputMapActions>();
    private readonly InputAction m_PlatformInputMap_SpawnBall;
    private readonly InputAction m_PlatformInputMap_Test;
    public struct PlatformInputMapActions
    {
        private @DefaultInputActions m_Wrapper;
        public PlatformInputMapActions(@DefaultInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnBall => m_Wrapper.m_PlatformInputMap_SpawnBall;
        public InputAction @Test => m_Wrapper.m_PlatformInputMap_Test;
        public InputActionMap Get() { return m_Wrapper.m_PlatformInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatformInputMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlatformInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlatformInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlatformInputMapActionsCallbackInterfaces.Add(instance);
            @SpawnBall.started += instance.OnSpawnBall;
            @SpawnBall.performed += instance.OnSpawnBall;
            @SpawnBall.canceled += instance.OnSpawnBall;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
        }

        private void UnregisterCallbacks(IPlatformInputMapActions instance)
        {
            @SpawnBall.started -= instance.OnSpawnBall;
            @SpawnBall.performed -= instance.OnSpawnBall;
            @SpawnBall.canceled -= instance.OnSpawnBall;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
        }

        public void RemoveCallbacks(IPlatformInputMapActions instance)
        {
            if (m_Wrapper.m_PlatformInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlatformInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlatformInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlatformInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlatformInputMapActions @PlatformInputMap => new PlatformInputMapActions(this);
    public interface IDebugInputMapActions
    {
        void OnRestart(InputAction.CallbackContext context);
    }
    public interface IPlatformInputMapActions
    {
        void OnSpawnBall(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
    }
}
